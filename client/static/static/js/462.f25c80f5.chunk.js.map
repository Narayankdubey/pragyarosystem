{"version":3,"file":"static/js/462.f25c80f5.chunk.js","mappings":"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","sources":["component/admin/emails/components/ConfirmModal.js","component/admin/emails/components/SendAllModal.js","component/admin/emails/index.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport CircularProgress, {\r\n  circularProgressClasses,\r\n} from \"@mui/material/CircularProgress\";\r\nimport LinearProgress, {\r\n  linearProgressClasses,\r\n} from \"@mui/material/LinearProgress\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport { sendAllEmail } from \"../../../../store/admin-action\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nconst thisSessionId = Math.random().toString(36).substr(2, 9);\r\n\r\nconst BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({\r\n  height: 10,\r\n  borderRadius: 5,\r\n  [`&.${linearProgressClasses.colorPrimary}`]: {\r\n    backgroundColor:\r\n      theme.palette.grey[theme.palette.mode === \"light\" ? 200 : 800],\r\n  },\r\n  [`& .${linearProgressClasses.bar}`]: {\r\n    borderRadius: 5,\r\n    backgroundColor: theme.palette.mode === \"light\" ? \"#1a90ff\" : \"#308fe8\",\r\n  },\r\n}));\r\n\r\nfunction FacebookCircularProgress(props) {\r\n  return (\r\n    <Box sx={{ position: \"relative\" }}>\r\n      <CircularProgress\r\n        variant=\"determinate\"\r\n        sx={{\r\n          color: (theme) =>\r\n            theme.palette.grey[theme.palette.mode === \"light\" ? 200 : 800],\r\n        }}\r\n        size={40}\r\n        thickness={4}\r\n        {...props}\r\n        value={100}\r\n      />\r\n      <CircularProgress\r\n        variant=\"indeterminate\"\r\n        disableShrink\r\n        sx={{\r\n          color: (theme) =>\r\n            theme.palette.mode === \"light\" ? \"#1a90ff\" : \"#308fe8\",\r\n          animationDuration: \"550ms\",\r\n          position: \"absolute\",\r\n          left: 0,\r\n          [`& .${circularProgressClasses.circle}`]: {\r\n            strokeLinecap: \"round\",\r\n          },\r\n        }}\r\n        size={40}\r\n        thickness={4}\r\n        {...props}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst columns = [\r\n  { field: \"email\", headerName: \"Email\", width: 200 },\r\n  {\r\n    field: \"status\",\r\n    headerName: \"Status\",\r\n    renderCell: (params) => {\r\n      const value = params.row.status;\r\n      return (\r\n        <Typography sx={{ color: value === \"Failed\" ? \"red\" : \"green\" }}>\r\n          {value}\r\n        </Typography>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\nfunction DataTable({ data, loading }) {\r\n  return (\r\n    <div style={{ height: 400, width: \"100%\" }}>\r\n      <DataGrid\r\n        loading={loading}\r\n        rows={data}\r\n        columns={columns}\r\n        pageSize={5}\r\n        rowsPerPageOptions={[5]}\r\n        getRowId={(row) => row?.email}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function ConfirmModal({ open, setOpen, inputValue }) {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.ui.emailSendLoader);\r\n  const { sentEmailData } = useSelector((state) => state.admin);\r\n  const [progress, setProgress] = useState({ value: 0, length: 100 });\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const onConfirmHandler = () => {\r\n    dispatch(sendAllEmail({ ...inputValue, socketSessionId: thisSessionId }));\r\n    setIsSubmitted(true);\r\n  };\r\n\r\n  const progressValue = useMemo(() => {\r\n    return Math.round((progress.value / progress.length) * 100);\r\n  }, [progress]);\r\n\r\n  useEffect(() => {\r\n    const socket = io(process.env.URL);\r\n    socket.on(\"connect\", () => {\r\n      setIsConnected(true);\r\n    });\r\n    socket.emit(\"connectInit\", thisSessionId);\r\n    socket.on(\"sendEmail\", (data) => {\r\n      setProgress(data);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle>\r\n          <Box\r\n            display={\"flex\"}\r\n            alignItems={\"center\"}\r\n            justifyContent={\"space-between\"}\r\n            width={\"100%\"}\r\n            minWidth={\"300px\"}\r\n          >\r\n            <Typography>Send Email To All Emails</Typography>\r\n            <IconButton onClick={handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {isSubmitted ? (\r\n            <>\r\n              {isConnected ? (\r\n                <Box sx={{ flexGrow: 1 }}>\r\n                  <Box\r\n                    display={\"flex\"}\r\n                    alignItems={\"center\"}\r\n                    justifyContent={\"space-between\"}\r\n                    width={\"100%\"}\r\n                  >\r\n                    <Typography>\r\n                      {progress.value}/{progress.length}\r\n                    </Typography>\r\n                    <Typography>{progressValue}%</Typography>\r\n                  </Box>\r\n                  <BorderLinearProgress\r\n                    variant=\"determinate\"\r\n                    value={progressValue}\r\n                  />\r\n                  <DataTable data={sentEmailData} loading={loading} />\r\n                </Box>\r\n              ) : (\r\n                <Box sx={{ flexGrow: 1 }}>\r\n                  <FacebookCircularProgress />\r\n                </Box>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <DialogContentText>\r\n              Email will be sent to all the email address present in database.\r\n            </DialogContentText>\r\n          )}\r\n        </DialogContent>\r\n        {!isSubmitted && (\r\n          <DialogActions>\r\n            <Button onClick={handleClose}>Cancel</Button>\r\n            <Button\r\n              type=\"submit\"\r\n              onClick={onConfirmHandler}\r\n              endIcon={loading && <CircularProgress size={\"small\"} />}\r\n            >\r\n              Agree\r\n            </Button>\r\n          </DialogActions>\r\n        )}\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React,{useState} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport ConfirmModal from './ConfirmModal';\r\n\r\nexport default function SendAllModal({ open, setOpen }) {\r\n  const [inputValue, setInputValue]=useState({subject:\"\",text:\"\"})\r\n  const [confirmOpen,setConfirmOpen] = useState(false)\r\n\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const onChangeHandler = ({target})=>{\r\n    setInputValue({...inputValue,[target.name]:target.value})\r\n  }\r\n  const onSubmitHandler = (e)=>{\r\n    e.preventDefault();\r\n    setConfirmOpen(true)\r\n    // dispatch(sendAllEmail({...inputValue,socketSessionId:thisSessionId}))\r\n    // handleClose()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {confirmOpen && <ConfirmModal open={confirmOpen} setOpen={setConfirmOpen} inputValue={inputValue}/>}\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle>Send Email To All Emails</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Email will be sent to all the email address present in database.\r\n          </DialogContentText>\r\n          <form onSubmit={onSubmitHandler}>\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"subject\"\r\n              label=\"Subject\"\r\n              name=\"subject\"\r\n              type=\"text\"\r\n              fullWidth\r\n              variant=\"standard\"\r\n              onChange={onChangeHandler}\r\n            />\r\n            <TextField\r\n              multiline\r\n              margin=\"dense\"\r\n              id=\"text\"\r\n              name=\"text\"\r\n              label=\"Text\"\r\n              type=\"text\"\r\n              fullWidth\r\n              variant=\"standard\"\r\n              onChange={onChangeHandler}\r\n            />\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button type='submit' onClick={onSubmitHandler}>Send</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nimport SendAllModal from \"./components/SendAllModal\";\r\nimport { Box } from \"@mui/material\";\r\n\r\nconst Emails = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  return (\r\n    <Box textAlign={\"center\"} minHeight={\"calc(100vh - 450px)\"}>\r\n      <Button variant=\"outlined\" onClick={handleOpen}>\r\n        Send Email to all users\r\n      </Button>\r\n      {open && <SendAllModal open={open} setOpen={setOpen} />}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Emails;\r\n"],"names":["thisSessionId","Math","random","toString","substr","BorderLinearProgress","styled","LinearProgress","theme","height","borderRadius","linearProgressClasses","backgroundColor","palette","grey","mode","FacebookCircularProgress","props","Box","sx","position","CircularProgress","variant","color","size","thickness","value","disableShrink","animationDuration","left","circularProgressClasses","strokeLinecap","columns","field","headerName","width","renderCell","params","row","status","Typography","DataTable","data","loading","style","rows","pageSize","rowsPerPageOptions","getRowId","email","ConfirmModal","open","setOpen","inputValue","dispatch","useDispatch","useSelector","state","ui","emailSendLoader","sentEmailData","admin","useState","length","progress","setProgress","isConnected","setIsConnected","isSubmitted","setIsSubmitted","handleClose","progressValue","useMemo","round","useEffect","socket","io","process","URL","on","emit","Dialog","onClose","DialogTitle","display","alignItems","justifyContent","minWidth","IconButton","onClick","Close","DialogContent","flexGrow","DialogContentText","DialogActions","Button","type","sendAllEmail","socketSessionId","endIcon","SendAllModal","subject","text","setInputValue","confirmOpen","setConfirmOpen","onChangeHandler","target","name","onSubmitHandler","e","preventDefault","onSubmit","TextField","autoFocus","margin","id","label","fullWidth","onChange","multiline","React","textAlign","minHeight"],"sourceRoot":""}